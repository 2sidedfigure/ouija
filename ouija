#!/usr/bin/env node

"use strict";

var

prog = require('commander'),
pkg = require('./package.json');

prog.version(pkg.version)
    .usage('[options]')
    .option('-p, --port <n>', 'The port to bind the proxy server to, defaults to 6660', parseInt)
    .parse(process.argv);

// if the user hasn't requested help or the version, time to get to work

var

http = require('http'),
url = require('url'),
exec = require('child_process').exec,
setCookie = require('./lib/setcookie'),

server = http.createServer(function(req, res) {
    var params = {
            'disk-cache': true,
            'ignore-ssl-errors': true,
            'max-disk-cache-size': 10*1024 // 10 Mb
        },
        getUnmodifiedContent = req.headers['ouija-get-unmodified-content'],
        normalizedAddress = url.format(url.parse(req.url)),
        customHeaders;

    // use a proxy if specified
    ['proxy', 'proxy-type', 'proxy-auth'].forEach(function(p) {
        var header = req.headers['ouija-' + p];

        if (header) {
            params[p] = header;
        }
    });

    // build an object of custom headers
    for (var h in req.headers) {
        var match = /^ouija\-pass\-(.*)$/i.exec(h);

        if (match && match[1]) {
            customHeaders = customHeaders || {};
            customHeaders[match[1]] = req.headers[h];
        }
    }

    var args = {
            address: normalizedAddress
        },
        script = './lib/repsonse.phantom.js',
        cmd = ['phantomjs'],
        cmdOpts = {
            timeout: 60 * 1000, // one minute
            maxBuffer: 2000 * 1024 // 2 Mb
        };

    customHeaders && (args['headers'] = "'" + JSON.stringify(customHeaders) + "'");
    getUnmodifiedContent && (args['unmodified-content'] = true);

    for (var p in params) {
        cmd.push('--' + p + '=' + params[p]);
    }

    cmd.push(script);

    for (var a in args) {
        var arg = '--' + a,
            val = args[a];

        if (val !== true) {
            arg += '=' + val;
        }

        cmd.push(arg);
    }

    exec(cmd.join(' '), cmdOpts, function(err, stdout, stderr) {
        if (err && err.code !== 0) {
            // return error
            res.writeHead(500);
            res.write(stderr);
            return res.end();
        }

        var response;

        try {
            response = JSON.parse(stdout);
        } catch (ex) {
            res.writeHead(500);
            res.write('Unable to parse response');
            return res.end();
        }

        // set response headers
        if (response.headers) {
            for (var h in response.headers) {
                res.setHeader(h, response.headers[h]);
            }
        }

        // recalculate the Content-Length header
        res.setHeader('Content-Length', (new Buffer(response.body)).length);

        // add the Set-Cookie header
        if (response.cookies) {
            var setCookieHeader = [];

            for (var c in response.cookies) {
                setCookieHeader.push(setCookie.format(response.cookies[c]));
            }

            setCookieHeader.length && res.setHeader('Set-Cookie', setCookieHeader);
        }

        // send the response
        res.writeHead(response.httpStatus || 200);
        res.write(response.body);
        return res.end();
    });

}).listen(prog.port || 6660),

address = server.address();

console.log('=> Ouija listening on ' + address.address + ':' + address.port);
