#!/usr/bin/env node

"use strict";

var

prog = require('commander'),
pkg = require('./package.json');

prog.version(pkg.version)
    .usage('[options]')
    .option('-p, --port <n>', 'The port to bind the proxy server to, defaults to 6660', parseInt)
    .option('-l, --log-level <level>', 'Set how noisy the log output is (SILENT|ERROR|WARN|DEBUG) [ERROR]', 'ERROR')
    .option('-b, --blacklist <file>', 'Specify a host blacklist configuration file')
    .option('-s, --storage-path <path>', 'Set the local storage path [$HOMEDIR/.ouija/localstorage]')
    .parse(process.argv);

// if the user hasn't requested help or the version, time to get to work

// set the local storage path if provided
prog.storagePath && responseLib.localStoragePath(prog.storagePath);

var

http = require('http'),
responseLib = require('./lib/response'),
setCookie = require('./lib/setcookie'),

port = prog.port || prog.port === 0
    ? prog.port
    : 6660,

server = http.createServer(function(req, res) {
    var response = responseLib.create(req.url, {
            returnUnmodifiedContent: !!req.headers['ouija-get-unmodified-content'],
            followHttpRedirect: !!req.headers['ouija-follow-http-redirect'],
            wait: req.headers['ouija-wait'],
            logLevel: prog.logLevel,
            blacklist: prog.blacklist
        });

    // use a proxy if specified
    ['proxy', 'proxy-type', 'proxy-auth'].forEach(function(key) {
        var val = req.headers['ouija-' + key];

        val && response.setPhantomParameter(key, val);
    });

    // set custom headers
    for (var h in req.headers) {
        var match = /^ouija\-pass\-(.*)$/i.exec(h);

        if (match && match[1]) {
            response.setCustomHeader(match[1], req.headers[h]);
        }
    }

    response.fetch(function(err, phRes, debug) {
        debug && debug.length && console.log(debug);

        if (err) {
            res.writeHead(err.status);
            res.write(err.message);
            return res.end();
        }

        // set response headers
        if (phRes.headers) {
            for (var h in phRes.headers) {
                res.setHeader(h, phRes.headers[h]);
            }
        }

        // recalculate the Content-Length header
        res.setHeader('Content-Length', (new Buffer(phRes.body)).length);

        // add the Set-Cookie header
        if (phRes.cookies) {
            var setCookieHeader = [];

            for (var c in phRes.cookies) {
                setCookieHeader.push(setCookie.format(phRes.cookies[c]));
            }

            res.setHeader('Set-Cookie', setCookieHeader);
        }

        // add the Ouija-JS-Error headers
        if (phRes.errors) {
            var errorHeader = [];

            for (var e in phRes.errors) {
                var msg = phRes.errors[e].message.replace(/:/g, ';');
                errorHeader.push(msg);
            }

            res.setHeader('Ouija-JS-Error', errorHeader);
        }

        // send the response
        res.writeHead(phRes.httpStatus || 200);
        res.write(phRes.body);
        return res.end();
    });

})
.on('error', function(e) {
    console.error(e.toString());
    process.exit(1);
})
.on('listening', function() {
    var address = server.address();

    console.log('=> Ouija listening on ' + address.address + ':' + address.port);
});

server.listen(port);

